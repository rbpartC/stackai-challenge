envVarGroups:
  - name: temporal-shared
    envVars:
    - key: DYNAMIC_CONFIG_FILE_PATH
      value: /etc/temporal/dynamicconfig_es.yaml
    - key: ENABLE_ES
      value: "true"
    - key: ES_VERSION
      value: v7
    - key: ES_USER
      value: elastic
    - key: DB
      value: postgresql

databases:
  - name: temporal-core
    # Core state db
    postgresMajorVersion: '17' 
    region: frankfurt
    plan: free
    databaseName: temporal
    user: temporal
    ipAllowList:
      - source: 0.0.0.0/0
        description: everywhere

services:
  # PG Bouncer. Should be private but not supported in free plan
  - type: pserv
    name: pgbouncerff
    runtime: docker
    # NOTE: service in != regions can't communicate privately ?
    region: frankfurt
    plan: standard
    # TODO: Should be pinned to a version
    repo: https://github.com/render-oss/docker-pgbouncer
    envVars:
      - key: DATABASE_URL
        fromDatabase:
          name:  temporal-core
          property: connectionString
      - key: POOL_MODE
        value: transaction
      - key: SERVER_RESET_QUERY
        value: DISCARD ALL
      - key: MAX_CLIENT_CONN
        value: 500
      - key: DEFAULT_POOL_SIZE
        value: 50

  - type: pserv
    # This is the visibility DB
    name: elasticsearch
    region: frankfurt
    plan: standard
    runtime: docker
    disk:
      name: esdata
      mountPath: /usr/share/elasticsearch/data
      sizeGB: 5
    repo: https://github.com/rbpartC/elasticsearch
    envVars:
      - fromGroup: temporal
      - key: discovery.type
        value: single-node
      - key: ES_JAVA_OPTS
        value: "-Xms512m -Xmx512m"
      - key: ELASTIC_PASSWORD
        generateValue: true
  
  - type: pserv
    name: temporal-frontend
    autoDeploy: false
    plan: starter
    region: frankfurt
    runtime: docker
    dockerfilePath: ./server/Dockerfile
    envVars:
    - key: PORT
      value: "7233"
    - fromGroup: temporal-shared
    - key: SERVICES
      value: frontend
    - key: SKIP_POSTGRES_DB_CREATION
      value: "true"
    - key: SKIP_VISIBILITY_DB_SETUP
      value: "true"
    - key: ES_SEEDS
      fromService:
        name: elasticsearch
        type: pserv
        property: host
    - key: ES_PWD
      fromService:
        name: elasticsearch
        type: pserv
        envVarKey: ELASTIC_PASSWORD
    - key: DBNAME
      fromDatabase:
        name: temporal-core
        property: database
    - key: DB_PORT
      fromDatabase:
        name: temporal-core
        property: port
    - key: POSTGRES_USER
      fromDatabase:
        name: temporal-core
        property: user
    - key: POSTGRES_PWD
      fromDatabase:
        name: temporal-core
        property: password
    - key: POSTGRES_SEEDS
      fromDatabase:
        name: temporal-core
        property: host

  - type: pserv
    name: temporal-history
    autoDeploy: false
    plan: starter
    region: frankfurt
    runtime: docker
    dockerfilePath: ./server/Dockerfile
    envVars:
    - fromGroup: temporal-shared
    - key: SERVICES
      value: history
    - key: TEMPORAL_FRONTEND_HOST
      fromService:
        name: temporal-frontend
        type: pserv
        property: host
    - key: ES_SEEDS
      fromService:
        name: elasticsearch
        type: pserv
        property: host
    - key: ES_PWD
      fromService:
        name: elasticsearch
        type: pserv
        envVarKey: ELASTIC_PASSWORD
    - key: DBNAME
      fromDatabase:
        name: temporal-core
        property: database
    - key: POSTGRES_USER
      fromDatabase:
        name: temporal-core
        property: user
    - key: POSTGRES_PWD
      fromDatabase:
        name: temporal-core
        property: password
    - key: POSTGRES_SEEDS
      fromDatabase:
        name: temporal-core
        property: host
    - key: DB_PORT
      fromDatabase:
        name: temporal-core
        property: port

  - type: pserv
    name: temporal-matching
    autoDeploy: false
    plan: starter
    region: frankfurt
    runtime: docker
    dockerfilePath: ./server/Dockerfile
    envVars:
    - fromGroup: temporal-shared
    - key: SERVICES
      value: matching
    - key: TEMPORAL_FRONTEND_HOST
      fromService:
        name: temporal-frontend
        type: pserv
        property: host
    - key: ES_SEEDS
      fromService:
        name: elasticsearch
        type: pserv
        property: host
    - key: ES_PWD
      fromService:
        name: elasticsearch
        type: pserv
        envVarKey: ELASTIC_PASSWORD
    - key: DBNAME
      fromDatabase:
        name: temporal-core
        property: database
    - key: POSTGRES_USER
      fromDatabase:
        name: temporal-core
        property: user
    - key: POSTGRES_PWD
      fromDatabase:
        name: temporal-core
        property: password
    - key: POSTGRES_SEEDS
      fromDatabase:
        name: temporal-core
        property: host
    - key: DB_PORT
      fromDatabase:
        name: temporal-core
        property: port
  - type: worker
    name: temporal-worker
    autoDeploy: false
    plan: starter
    region: frankfurt
    runtime: docker
    dockerfilePath: ./server/Dockerfile
    envVars:
    - fromGroup: temporal-shared
    # The worker service needs to wait for the history service to be up first,
    # otherwise it will fail with "error starting scanner".
    - key: DEPENDS_ON_HISTORY
      fromService:
        name: temporal-history
        type: pserv
        property: host
    - key: SERVICES
      value: worker
    - key: TEMPORAL_FRONTEND_HOST
      fromService:
        name: temporal-frontend
        type: pserv
        property: host
    - key: ES_SEEDS
      fromService:
        name: elasticsearch
        type: pserv
        property: host
    - key: ES_PWD
      fromService:
        name: elasticsearch
        type: pserv
        envVarKey: ELASTIC_PASSWORD
    - key: DBNAME
      fromDatabase:
        name: temporal-core
        property: database
    - key: POSTGRES_USER
      fromDatabase:
        name: temporal-core
        property: user
    - key: POSTGRES_PWD
      fromDatabase:
        name: temporal-core
        property: password
    - key: POSTGRES_SEEDS
      fromDatabase:
        name: temporal-core
        property: host
    - key: DB_PORT
      fromDatabase:
        name: temporal-core
        property: port
        
  - type: web
    name: temporal-ui
    autoDeploy: false
    plan: starter
    region: frankfurt
    runtime: docker
    dockerfilePath: ./web/Dockerfile
    envVars:
    - key: PORT
      # For render
      value: 8080
    - key: TEMPORAL_UI_PORT
      # For temporal
      value: 8080
    - key: TEMPORAL_PERMIT_WRITE_API
      value: "true"
    - key: TEMPORAL_GRPC_HOST
      fromService:
        name: temporal-frontend
        type: pserv
        property: host

  - type: worker
    name: temporal-python-worker
    plan: starter
    region: frankfurt
    runtime: docker
    dockerfilePath: ./temporal-workflows/Dockerfile
    envVars:
    - key: TEMPORAL_HOST
      fromService:
        name: temporal-frontend
        type: pserv
        property: host
    - key: TEMPORAL_PORT
      value: "7233"